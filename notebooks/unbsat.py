#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Jan 28 13:42:53 2017 by generateDS.py version 2.24a.
#
# Command line options:
#   ('--super', 'sat')
#   ('-o', 'unbsat.py')
#   ('-s', 'unbsatsubs.py')
#
# Command line arguments:
#   local_data/xml/TestbedSatJun12Flows.xsd
#
# Command line:
#   /home/karan/Development/src/github.com/karanthukral/FYDP/venv/bin/generateDS --super="sat" -o "unbsat.py" -s "unbsatsubs.py" local_data/xml/TestbedSatJun12Flows.xsd
#
# Current working directory (os.getcwd()):
#   FYDP
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name, pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class dataroot(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, generated=None, TestbedSatJun12=None):
        self.original_tagname_ = None
        if isinstance(generated, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(generated, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = generated
        self.generated = initvalue_
        if TestbedSatJun12 is None:
            self.TestbedSatJun12 = []
        else:
            self.TestbedSatJun12 = TestbedSatJun12
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, dataroot)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if dataroot.subclass:
            return dataroot.subclass(*args_, **kwargs_)
        else:
            return dataroot(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TestbedSatJun12(self): return self.TestbedSatJun12
    def set_TestbedSatJun12(self, TestbedSatJun12): self.TestbedSatJun12 = TestbedSatJun12
    def add_TestbedSatJun12(self, value): self.TestbedSatJun12.append(value)
    def insert_TestbedSatJun12_at(self, index, value): self.TestbedSatJun12.insert(index, value)
    def replace_TestbedSatJun12_at(self, index, value): self.TestbedSatJun12[index] = value
    def get_generated(self): return self.generated
    def set_generated(self, generated): self.generated = generated
    def hasContent_(self):
        if (
            self.TestbedSatJun12
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='dataroot', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dataroot')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='dataroot', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dataroot'):
        if self.generated is not None and 'generated' not in already_processed:
            already_processed.add('generated')
            outfile.write(' generated="%s"' % self.gds_format_datetime(self.generated, input_name='generated'))
    def exportChildren(self, outfile, level, namespace_='', name_='dataroot', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TestbedSatJun12_ in self.TestbedSatJun12:
            TestbedSatJun12_.export(outfile, level, namespace_, name_='TestbedSatJun12', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('generated', node)
        if value is not None and 'generated' not in already_processed:
            already_processed.add('generated')
            try:
                self.generated = self.gds_parse_datetime(value)
            except ValueError as exp:
                raise ValueError('Bad date-time attribute (generated): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TestbedSatJun12':
            obj_ = TestbedSatJun12.factory()
            obj_.build(child_)
            self.TestbedSatJun12.append(obj_)
            obj_.original_tagname_ = 'TestbedSatJun12'
# end class dataroot


class TestbedSatJun12(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, appName=None, totalSourceBytes=None, totalDestinationBytes=None, totalDestinationPackets=None, totalSourcePackets=None, sourcePayloadAsBase64=None, sourcePayloadAsUTF=None, destinationPayloadAsBase64=None, destinationPayloadAsUTF=None, direction=None, sourceTCPFlagsDescription=None, destinationTCPFlagsDescription=None, source=None, protocolName=None, sourcePort=None, destination=None, destinationPort=None, startDateTime=None, stopDateTime=None, Tag=None):
        self.original_tagname_ = None
        self.appName = appName
        self.validate_appNameType(self.appName)
        self.totalSourceBytes = totalSourceBytes
        self.totalDestinationBytes = totalDestinationBytes
        self.totalDestinationPackets = totalDestinationPackets
        self.totalSourcePackets = totalSourcePackets
        self.sourcePayloadAsBase64 = sourcePayloadAsBase64
        self.validate_sourcePayloadAsBase64Type(self.sourcePayloadAsBase64)
        self.sourcePayloadAsUTF = sourcePayloadAsUTF
        self.validate_sourcePayloadAsUTFType(self.sourcePayloadAsUTF)
        self.destinationPayloadAsBase64 = destinationPayloadAsBase64
        self.validate_destinationPayloadAsBase64Type(self.destinationPayloadAsBase64)
        self.destinationPayloadAsUTF = destinationPayloadAsUTF
        self.validate_destinationPayloadAsUTFType(self.destinationPayloadAsUTF)
        self.direction = direction
        self.validate_directionType(self.direction)
        self.sourceTCPFlagsDescription = sourceTCPFlagsDescription
        self.validate_sourceTCPFlagsDescriptionType(self.sourceTCPFlagsDescription)
        self.destinationTCPFlagsDescription = destinationTCPFlagsDescription
        self.validate_destinationTCPFlagsDescriptionType(self.destinationTCPFlagsDescription)
        self.source = source
        self.validate_sourceType(self.source)
        self.protocolName = protocolName
        self.validate_protocolNameType(self.protocolName)
        self.sourcePort = sourcePort
        self.validate_sourcePortType(self.sourcePort)
        self.destination = destination
        self.validate_destinationType(self.destination)
        self.destinationPort = destinationPort
        self.validate_destinationPortType(self.destinationPort)
        if isinstance(startDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(startDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = startDateTime
        self.startDateTime = initvalue_
        if isinstance(stopDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(stopDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = stopDateTime
        self.stopDateTime = initvalue_
        self.Tag = Tag
        self.validate_TagType(self.Tag)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TestbedSatJun12)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TestbedSatJun12.subclass:
            return TestbedSatJun12.subclass(*args_, **kwargs_)
        else:
            return TestbedSatJun12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_appName(self): return self.appName
    def set_appName(self, appName): self.appName = appName
    def get_totalSourceBytes(self): return self.totalSourceBytes
    def set_totalSourceBytes(self, totalSourceBytes): self.totalSourceBytes = totalSourceBytes
    def get_totalDestinationBytes(self): return self.totalDestinationBytes
    def set_totalDestinationBytes(self, totalDestinationBytes): self.totalDestinationBytes = totalDestinationBytes
    def get_totalDestinationPackets(self): return self.totalDestinationPackets
    def set_totalDestinationPackets(self, totalDestinationPackets): self.totalDestinationPackets = totalDestinationPackets
    def get_totalSourcePackets(self): return self.totalSourcePackets
    def set_totalSourcePackets(self, totalSourcePackets): self.totalSourcePackets = totalSourcePackets
    def get_sourcePayloadAsBase64(self): return self.sourcePayloadAsBase64
    def set_sourcePayloadAsBase64(self, sourcePayloadAsBase64): self.sourcePayloadAsBase64 = sourcePayloadAsBase64
    def get_sourcePayloadAsUTF(self): return self.sourcePayloadAsUTF
    def set_sourcePayloadAsUTF(self, sourcePayloadAsUTF): self.sourcePayloadAsUTF = sourcePayloadAsUTF
    def get_destinationPayloadAsBase64(self): return self.destinationPayloadAsBase64
    def set_destinationPayloadAsBase64(self, destinationPayloadAsBase64): self.destinationPayloadAsBase64 = destinationPayloadAsBase64
    def get_destinationPayloadAsUTF(self): return self.destinationPayloadAsUTF
    def set_destinationPayloadAsUTF(self, destinationPayloadAsUTF): self.destinationPayloadAsUTF = destinationPayloadAsUTF
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def get_sourceTCPFlagsDescription(self): return self.sourceTCPFlagsDescription
    def set_sourceTCPFlagsDescription(self, sourceTCPFlagsDescription): self.sourceTCPFlagsDescription = sourceTCPFlagsDescription
    def get_destinationTCPFlagsDescription(self): return self.destinationTCPFlagsDescription
    def set_destinationTCPFlagsDescription(self, destinationTCPFlagsDescription): self.destinationTCPFlagsDescription = destinationTCPFlagsDescription
    def get_source(self): return self.source
    def set_source(self, source): self.source = source
    def get_protocolName(self): return self.protocolName
    def set_protocolName(self, protocolName): self.protocolName = protocolName
    def get_sourcePort(self): return self.sourcePort
    def set_sourcePort(self, sourcePort): self.sourcePort = sourcePort
    def get_destination(self): return self.destination
    def set_destination(self, destination): self.destination = destination
    def get_destinationPort(self): return self.destinationPort
    def set_destinationPort(self, destinationPort): self.destinationPort = destinationPort
    def get_startDateTime(self): return self.startDateTime
    def set_startDateTime(self, startDateTime): self.startDateTime = startDateTime
    def get_stopDateTime(self): return self.stopDateTime
    def set_stopDateTime(self, stopDateTime): self.stopDateTime = stopDateTime
    def get_Tag(self): return self.Tag
    def set_Tag(self, Tag): self.Tag = Tag
    def validate_appNameType(self, value):
        # Validate type appNameType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on appNameType' % {"value" : value.encode("utf-8")} )
    def validate_sourcePayloadAsBase64Type(self, value):
        # Validate type sourcePayloadAsBase64Type, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 536870910:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on sourcePayloadAsBase64Type' % {"value" : value.encode("utf-8")} )
    def validate_sourcePayloadAsUTFType(self, value):
        # Validate type sourcePayloadAsUTFType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 536870910:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on sourcePayloadAsUTFType' % {"value" : value.encode("utf-8")} )
    def validate_destinationPayloadAsBase64Type(self, value):
        # Validate type destinationPayloadAsBase64Type, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 536870910:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on destinationPayloadAsBase64Type' % {"value" : value.encode("utf-8")} )
    def validate_destinationPayloadAsUTFType(self, value):
        # Validate type destinationPayloadAsUTFType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 536870910:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on destinationPayloadAsUTFType' % {"value" : value.encode("utf-8")} )
    def validate_directionType(self, value):
        # Validate type directionType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on directionType' % {"value" : value.encode("utf-8")} )
    def validate_sourceTCPFlagsDescriptionType(self, value):
        # Validate type sourceTCPFlagsDescriptionType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on sourceTCPFlagsDescriptionType' % {"value" : value.encode("utf-8")} )
    def validate_destinationTCPFlagsDescriptionType(self, value):
        # Validate type destinationTCPFlagsDescriptionType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on destinationTCPFlagsDescriptionType' % {"value" : value.encode("utf-8")} )
    def validate_sourceType(self, value):
        # Validate type sourceType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on sourceType' % {"value" : value.encode("utf-8")} )
    def validate_protocolNameType(self, value):
        # Validate type protocolNameType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on protocolNameType' % {"value" : value.encode("utf-8")} )
    def validate_sourcePortType(self, value):
        # Validate type sourcePortType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on sourcePortType' % {"value" : value.encode("utf-8")} )
    def validate_destinationType(self, value):
        # Validate type destinationType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on destinationType' % {"value" : value.encode("utf-8")} )
    def validate_destinationPortType(self, value):
        # Validate type destinationPortType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on destinationPortType' % {"value" : value.encode("utf-8")} )
    def validate_TagType(self, value):
        # Validate type TagType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on TagType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.appName is not None or
            self.totalSourceBytes is not None or
            self.totalDestinationBytes is not None or
            self.totalDestinationPackets is not None or
            self.totalSourcePackets is not None or
            self.sourcePayloadAsBase64 is not None or
            self.sourcePayloadAsUTF is not None or
            self.destinationPayloadAsBase64 is not None or
            self.destinationPayloadAsUTF is not None or
            self.direction is not None or
            self.sourceTCPFlagsDescription is not None or
            self.destinationTCPFlagsDescription is not None or
            self.source is not None or
            self.protocolName is not None or
            self.sourcePort is not None or
            self.destination is not None or
            self.destinationPort is not None or
            self.startDateTime is not None or
            self.stopDateTime is not None or
            self.Tag is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TestbedSatJun12', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TestbedSatJun12')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TestbedSatJun12', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TestbedSatJun12'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TestbedSatJun12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.appName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sappName>%s</%sappName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.appName), input_name='appName')), namespace_, eol_))
        if self.totalSourceBytes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalSourceBytes>%s</%stotalSourceBytes>%s' % (namespace_, self.gds_format_integer(self.totalSourceBytes, input_name='totalSourceBytes'), namespace_, eol_))
        if self.totalDestinationBytes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalDestinationBytes>%s</%stotalDestinationBytes>%s' % (namespace_, self.gds_format_integer(self.totalDestinationBytes, input_name='totalDestinationBytes'), namespace_, eol_))
        if self.totalDestinationPackets is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalDestinationPackets>%s</%stotalDestinationPackets>%s' % (namespace_, self.gds_format_integer(self.totalDestinationPackets, input_name='totalDestinationPackets'), namespace_, eol_))
        if self.totalSourcePackets is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalSourcePackets>%s</%stotalSourcePackets>%s' % (namespace_, self.gds_format_integer(self.totalSourcePackets, input_name='totalSourcePackets'), namespace_, eol_))
        if self.sourcePayloadAsBase64 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssourcePayloadAsBase64>%s</%ssourcePayloadAsBase64>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.sourcePayloadAsBase64), input_name='sourcePayloadAsBase64')), namespace_, eol_))
        if self.sourcePayloadAsUTF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssourcePayloadAsUTF>%s</%ssourcePayloadAsUTF>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.sourcePayloadAsUTF), input_name='sourcePayloadAsUTF')), namespace_, eol_))
        if self.destinationPayloadAsBase64 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationPayloadAsBase64>%s</%sdestinationPayloadAsBase64>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.destinationPayloadAsBase64), input_name='destinationPayloadAsBase64')), namespace_, eol_))
        if self.destinationPayloadAsUTF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationPayloadAsUTF>%s</%sdestinationPayloadAsUTF>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.destinationPayloadAsUTF), input_name='destinationPayloadAsUTF')), namespace_, eol_))
        if self.direction is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdirection>%s</%sdirection>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.direction), input_name='direction')), namespace_, eol_))
        if self.sourceTCPFlagsDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssourceTCPFlagsDescription>%s</%ssourceTCPFlagsDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.sourceTCPFlagsDescription), input_name='sourceTCPFlagsDescription')), namespace_, eol_))
        if self.destinationTCPFlagsDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationTCPFlagsDescription>%s</%sdestinationTCPFlagsDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.destinationTCPFlagsDescription), input_name='destinationTCPFlagsDescription')), namespace_, eol_))
        if self.source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssource>%s</%ssource>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.source), input_name='source')), namespace_, eol_))
        if self.protocolName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprotocolName>%s</%sprotocolName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.protocolName), input_name='protocolName')), namespace_, eol_))
        if self.sourcePort is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssourcePort>%s</%ssourcePort>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.sourcePort), input_name='sourcePort')), namespace_, eol_))
        if self.destination is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestination>%s</%sdestination>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.destination), input_name='destination')), namespace_, eol_))
        if self.destinationPort is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationPort>%s</%sdestinationPort>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.destinationPort), input_name='destinationPort')), namespace_, eol_))
        if self.startDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstartDateTime>%s</%sstartDateTime>%s' % (namespace_, self.gds_format_datetime(self.startDateTime, input_name='startDateTime'), namespace_, eol_))
        if self.stopDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstopDateTime>%s</%sstopDateTime>%s' % (namespace_, self.gds_format_datetime(self.stopDateTime, input_name='stopDateTime'), namespace_, eol_))
        if self.Tag is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTag>%s</%sTag>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Tag), input_name='Tag')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'appName':
            appName_ = child_.text
            appName_ = self.gds_validate_string(appName_, node, 'appName')
            self.appName = appName_
            # validate type appNameType
            self.validate_appNameType(self.appName)
        elif nodeName_ == 'totalSourceBytes':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'totalSourceBytes')
            self.totalSourceBytes = ival_
        elif nodeName_ == 'totalDestinationBytes':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'totalDestinationBytes')
            self.totalDestinationBytes = ival_
        elif nodeName_ == 'totalDestinationPackets':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'totalDestinationPackets')
            self.totalDestinationPackets = ival_
        elif nodeName_ == 'totalSourcePackets':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'totalSourcePackets')
            self.totalSourcePackets = ival_
        elif nodeName_ == 'sourcePayloadAsBase64':
            sourcePayloadAsBase64_ = child_.text
            sourcePayloadAsBase64_ = self.gds_validate_string(sourcePayloadAsBase64_, node, 'sourcePayloadAsBase64')
            self.sourcePayloadAsBase64 = sourcePayloadAsBase64_
            # validate type sourcePayloadAsBase64Type
            self.validate_sourcePayloadAsBase64Type(self.sourcePayloadAsBase64)
        elif nodeName_ == 'sourcePayloadAsUTF':
            sourcePayloadAsUTF_ = child_.text
            sourcePayloadAsUTF_ = self.gds_validate_string(sourcePayloadAsUTF_, node, 'sourcePayloadAsUTF')
            self.sourcePayloadAsUTF = sourcePayloadAsUTF_
            # validate type sourcePayloadAsUTFType
            self.validate_sourcePayloadAsUTFType(self.sourcePayloadAsUTF)
        elif nodeName_ == 'destinationPayloadAsBase64':
            destinationPayloadAsBase64_ = child_.text
            destinationPayloadAsBase64_ = self.gds_validate_string(destinationPayloadAsBase64_, node, 'destinationPayloadAsBase64')
            self.destinationPayloadAsBase64 = destinationPayloadAsBase64_
            # validate type destinationPayloadAsBase64Type
            self.validate_destinationPayloadAsBase64Type(self.destinationPayloadAsBase64)
        elif nodeName_ == 'destinationPayloadAsUTF':
            destinationPayloadAsUTF_ = child_.text
            destinationPayloadAsUTF_ = self.gds_validate_string(destinationPayloadAsUTF_, node, 'destinationPayloadAsUTF')
            self.destinationPayloadAsUTF = destinationPayloadAsUTF_
            # validate type destinationPayloadAsUTFType
            self.validate_destinationPayloadAsUTFType(self.destinationPayloadAsUTF)
        elif nodeName_ == 'direction':
            direction_ = child_.text
            direction_ = self.gds_validate_string(direction_, node, 'direction')
            self.direction = direction_
            # validate type directionType
            self.validate_directionType(self.direction)
        elif nodeName_ == 'sourceTCPFlagsDescription':
            sourceTCPFlagsDescription_ = child_.text
            sourceTCPFlagsDescription_ = self.gds_validate_string(sourceTCPFlagsDescription_, node, 'sourceTCPFlagsDescription')
            self.sourceTCPFlagsDescription = sourceTCPFlagsDescription_
            # validate type sourceTCPFlagsDescriptionType
            self.validate_sourceTCPFlagsDescriptionType(self.sourceTCPFlagsDescription)
        elif nodeName_ == 'destinationTCPFlagsDescription':
            destinationTCPFlagsDescription_ = child_.text
            destinationTCPFlagsDescription_ = self.gds_validate_string(destinationTCPFlagsDescription_, node, 'destinationTCPFlagsDescription')
            self.destinationTCPFlagsDescription = destinationTCPFlagsDescription_
            # validate type destinationTCPFlagsDescriptionType
            self.validate_destinationTCPFlagsDescriptionType(self.destinationTCPFlagsDescription)
        elif nodeName_ == 'source':
            source_ = child_.text
            source_ = self.gds_validate_string(source_, node, 'source')
            self.source = source_
            # validate type sourceType
            self.validate_sourceType(self.source)
        elif nodeName_ == 'protocolName':
            protocolName_ = child_.text
            protocolName_ = self.gds_validate_string(protocolName_, node, 'protocolName')
            self.protocolName = protocolName_
            # validate type protocolNameType
            self.validate_protocolNameType(self.protocolName)
        elif nodeName_ == 'sourcePort':
            sourcePort_ = child_.text
            sourcePort_ = self.gds_validate_string(sourcePort_, node, 'sourcePort')
            self.sourcePort = sourcePort_
            # validate type sourcePortType
            self.validate_sourcePortType(self.sourcePort)
        elif nodeName_ == 'destination':
            destination_ = child_.text
            destination_ = self.gds_validate_string(destination_, node, 'destination')
            self.destination = destination_
            # validate type destinationType
            self.validate_destinationType(self.destination)
        elif nodeName_ == 'destinationPort':
            destinationPort_ = child_.text
            destinationPort_ = self.gds_validate_string(destinationPort_, node, 'destinationPort')
            self.destinationPort = destinationPort_
            # validate type destinationPortType
            self.validate_destinationPortType(self.destinationPort)
        elif nodeName_ == 'startDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.startDateTime = dval_
        elif nodeName_ == 'stopDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.stopDateTime = dval_
        elif nodeName_ == 'Tag':
            Tag_ = child_.text
            Tag_ = self.gds_validate_string(Tag_, node, 'Tag')
            self.Tag = Tag_
            # validate type TagType
            self.validate_TagType(self.Tag)
# end class TestbedSatJun12


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'dataroot'
        rootClass = dataroot
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'dataroot'
        rootClass = dataroot
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'dataroot'
        rootClass = dataroot
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'dataroot'
        rootClass = dataroot
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from unbsat import *\n\n')
        sys.stdout.write('import unbsat as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "TestbedSatJun12",
    "dataroot"
]
